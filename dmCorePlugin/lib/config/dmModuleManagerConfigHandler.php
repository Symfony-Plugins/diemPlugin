<?php

/*
 * This file is part of the symfony package.
 * (c) 2004-2006 Fabien Potencier <fabien.potencier@symfony-project.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

/**
 * @package    symfony
 * @subpackage config
 * @author     Fabien Potencier <fabien.potencier@symfony-project.com>
 * @version    SVN: $Id: sfRoutingConfigHandler.class.php 21923 2009-09-11 14:47:38Z fabien $
 */
class dmModuleManagerConfigHandler extends sfYamlConfigHandler
{
  protected
  $config,
  $modules,
  $projectModules;
  
  /**
   * Executes this configuration handler.
   *
   * @param array $configFiles An array of absolute filesystem path to a configuration file
   *
   * @return string Data to be written to a cache file
   *
   * @throws sfConfigurationException If a requested configuration file does not exist or is not readable
   * @throws sfParseException         If a requested configuration file is improperly formatted
   */
  public function execute($configFiles)
  {
    $this->parse($configFiles);
    
    $this->processHierarchy();
    
    $managerClass = 'dmModuleManager';

    $options = array(
      'type_class' => 'dmModuleType',
      'space_class' => 'dmModuleSpace',
      'module_base_class' => 'dmModule',
      'module_node_class' => 'dmProjectModule'
    );

    $data = array();

    $data[] = sprintf('$options = %s;', var_export($options, true));

    $data[] = sprintf('$manager = new %s($options);', $managerClass);

    $data[] = sprintf('$modules = array(); $projectModules = array();');

    $data[] = sprintf('$types = array();');

    foreach($this->config as $typeName => $typeConfig)
    {
      $data[] = sprintf('$types[\'%s\'] = new %s;', $typeName, $options['type_class']);

      $data[] = sprintf('$typeSpaces = array();');

      foreach($typeConfig as $spaceName => $modulesConfig)
      {
        $data[] = sprintf('$typeSpaces[\'%s\'] = new %s;', $spaceName, $options['space_class']);

        $data[] = sprintf('$spaceModules = array();');

        foreach($modulesConfig as $moduleKey => $moduleConfig)
        {
          $moduleClass = $options[$moduleConfig['is_project'] ? 'module_node_class' : 'module_base_class'];

          $data[] = sprintf('$spaceModules[\'%s\'] = new %s(\'%s\', $typeSpaces[\'%s\'], $manager, %s);', $moduleKey, $moduleClass, $moduleKey, $spaceName, $this->getExportedModuleOptions($moduleKey, $moduleConfig));

          if ($moduleConfig['is_project'])
          {
            $data[] = sprintf('$modules[\'%s\'] = $projectModules[\'%s\'] = $spaceModules[\'%s\'];', $moduleKey, $moduleKey, $moduleKey);
          }
          else
          {
            $data[] = sprintf('$modules[\'%s\'] = $spaceModules[\'%s\'];', $moduleKey, $moduleKey);
          }
        }

        $data[] = sprintf('$typeSpaces[\'%s\']->initialize(\'%s\', $types[\'%s\'], $spaceModules);', $spaceName, $spaceName, $typeName);
        
        $data[] = 'unset($spaceModules);';
      }

      $data[] = sprintf('$types[\'%s\']->initialize(\'%s\', $typeSpaces);', $typeName, $typeName);
      
      $data[] = 'unset($typeSpaces);';
    }

    $data[] = sprintf('$manager->load($types, $modules, $projectModules);');
    
    $data[] = 'unset($types, $modules, $projectModules);';

    $data[] = 'return $manager;';
    
    unset($this->config, $this->modules, $this->projectModules);

    return sprintf("<?php\n".
                 "// auto-generated by dmModuleManagerConfigHandler\n".
                 "// date: %s\n%s", date('Y/m/d H:i:s'), implode("\n", $data)
    );
  }

  protected function getExportedModuleOptions($key, $options)
  {
    if ($options['is_project'])
    {
      $actionsConfig = $options['actions'];
      
      $options['actions'] = '__DM_MODULE_ACTIONS_PLACEHOLDER__';
      
      $exported  = var_export($options, true);
      
      $actions = 'array(';

      foreach($actionsConfig as $actionKey => $actionConfig)
      {
        if (is_integer($actionKey))
        {
          $actionKey = $actionConfig;
          $actionConfig = array();
        }
        
        if (empty($actionConfig['name']))
        {
          $actionConfig['name'] = dmString::humanize($actionKey);
        }
    
        if (empty($actionConfig['type']))
        {
          if (strncmp($actionKey, 'list', 4) === 0)
          {
            $actionConfig['type'] = 'list';
          }
          elseif (strncmp($actionKey, 'show', 4) === 0)
          {
            $actionConfig['type'] = 'show';
          }
          else
          {
            $actionConfig['type'] = 'simple';
          }
        }
        
        $actions .= sprintf('\'%s\' => new dmAction(\'%s\', %s), ', $actionKey, $actionKey, var_export($actionConfig, true));
      }

      $actions .= ')';
      
      $exported = str_replace('\'__DM_MODULE_ACTIONS_PLACEHOLDER__\'', $actions, $exported);
    }
    else
    {
      $exported  = var_export($options, true);
    }

    return $exported;
  }
  
  protected function getModuleChildrenKeys($key)
  {
    $children = array();
    
    foreach($this->projectModules as $moduleConfig)
    {
      if ($moduleConfig['parent'] === $this->key)
      {
        $children[$otherModule->getKey()] = $otherModule;
      }
    }
  }

  protected function parse($configFiles)
  {
    // parse the yaml
    $config = self::getConfiguration($configFiles);
    
    $this->config = array();
    $this->modules = array();
    $this->projectModules = array();
    
    foreach($config as $typeName => $typeConfig)
    {
      $this->config[$typeName] = array();
      $isInProject = $typeName === 'Project';
      
      foreach($typeConfig as $spaceName => $spaceConfig)
      {
        $this->config[$typeName][$spaceName] = array();
        
        foreach($spaceConfig as $moduleKey => $moduleConfig)
        {
          $moduleKey = dmString::modulize($moduleKey);
          
          $moduleConfig = $this->fixModuleConfig($moduleKey, $moduleConfig, $isInProject);
          
          $this->modules[$moduleKey] = $moduleConfig;
          
          if ($moduleConfig['is_project'])
          {
            $this->projectModules[$moduleKey] = $moduleConfig;
          }
          
          $this->config[$typeName][$spaceName][$moduleKey] = $moduleConfig;
        }
      }
    }
    
    unset($config);
  }
  
  protected function fixModuleConfig($moduleKey, $moduleConfig, $isInProject)
  {
    /*
     * Extract plural from name
     * name | plural
     */
    if (!empty($moduleConfig['name']))
    {
      if (strpos($moduleConfig['name'], '|'))
      {
        list($moduleConfig['name'], $moduleConfig['plural']) = explode('|', $moduleConfig['name']);
      }
    }
    else
    {
      $moduleConfig['name'] = dmString::humanize($moduleKey);
    }
    
    $model = trim(empty($moduleConfig['model']) ? dmString::camelize($moduleKey) : $moduleConfig['model']);
    if(!Doctrine::isValidModelClass($model))
    {
      $model = false;
    }

    $moduleOptions = array(
      'name' =>       (string) trim($moduleConfig['name']),
      'plural' =>     (string) trim(empty($moduleConfig['plural']) ? ($model ? dmString::pluralize($moduleConfig['name']) : $moduleConfig['name']) : $moduleConfig['plural']),
      'model' =>      $model,
      'credentials' => isset($moduleConfig['credentials']) ? trim($moduleConfig['credentials']) : null,
      'underscore'  => (string) dmString::underscore($moduleKey),
      'is_project'  => (boolean) dmArray::get($moduleConfig, 'project', $isInProject)
    );
    
    if ($moduleOptions['is_project'])
    {
      $moduleOptions = array_merge($moduleOptions, array(
        'parent_key' => dmArray::get($moduleConfig, 'parent') ? dmString::modulize(trim(dmArray::get($moduleConfig, 'parent'))) : null,
        'has_page'   => (boolean) dmArray::get($moduleConfig, 'page', false),
        'actions'   => (array) dmArray::get($moduleConfig, 'actions', array())
      ));
    }
    
    return $moduleOptions;
  }
  
  protected function processHierarchy()
  {
    foreach($this->config as $typeName => $typeConfig)
    {
      foreach($typeConfig as $spaceName => $spaceConfig)
      {
        foreach($spaceConfig as $moduleKey => $moduleConfig)
        {
          if (!$moduleConfig['is_project'])
          {
            continue;
          }
          
          $moduleConfig['children_keys'] = $this->getChildrenKeys($moduleKey);
          
          $moduleConfig['path_keys'] = $this->getPathKeys($moduleKey);
          
          $this->config[$typeName][$spaceName][$moduleKey] = $moduleConfig;
        }
      }
    }
  }
  
  protected function getChildrenKeys($moduleKey)
  {
    $childrenKeys = array();
    
    foreach($this->projectModules as $otherModuleKey => $otherModuleConfig)
    {
      if ($otherModuleConfig['parent_key'] === $moduleKey)
      {
        $childrenKeys[] = $otherModuleKey;
      }
    }
    
    return $childrenKeys;
  }
  
  protected function getPathKeys($moduleKey)
  {
    $pathKeys = array();

    $ancestorModuleKey = $moduleKey;
    while($ancestorModuleKey = $this->projectModules[$ancestorModuleKey]['parent_key'])
    {
      $pathKeys[] = $ancestorModuleKey;
    }

    return array_reverse($pathKeys);
  }
  
  /**
   * @see sfConfigHandler
   */
  static public function getConfiguration(array $configFiles)
  {
    return self::parseYamls($configFiles);
  }
}