<?php

/**
 * PluginDmSession
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 5845 2009-06-09 07:36:57Z jwage $
 */
abstract class PluginDmSession extends BaseDmSession
{

  const
    HISTORY_SEPARATOR = "|",
    HISTORY_MAX_SIZE = 500,
    HISTORY_MIN_SIZE = 200;

  protected
    $agent;

  public function create($serverInfo)
  {
    $this->fromArray(array(
      'sess_id' => session_id(),
      'ip' => $serverInfo['REMOTE_ADDR'],
      'arrival_time' => time(),
      'nb_pages' => 0,
      'url' => $serverInfo['REQUEST_URI']
    ), false);

    return $this->updateAgentInformations($serverInfo['HTTP_USER_AGENT']);
  }

  public function update($serverInfo, $time = null, $content_length, $is_page_in_cache = false)
  {
    $ct = dm::getResponse()->getContentType();

    return $this
    ->updateHistory($serverInfo['REQUEST_URI'])
    ->set('url', $serverInfo['REQUEST_URI'])
    ->set('nb_pages', $this->getNbPages()+1)
    ->set('dm_profile_id', dm::getUser()->getProfileId())
    ->set('status_code', dm::getResponse()->getStatusCode())
    ->set('content_type', substr($ct, 0, strpos($ct, ";")))
    ->set('content_length', $content_length)
    ->set('is_cached', $is_page_in_cache)
    ->set('sess_id', session_id())
    ->set('time', $time)
    ->set('last_time', time());
  }

  protected function updateAgentInformations($userAgent)
  {
    $this->setUserAgent($userAgent);
    $agent = $this->getAgent();

    return $this
    ->setBrowserName($agent->getBrowserName())
    ->setBrowserVersion($agent->getBrowserVersion())
    ->setPlatform($agent->getPlatform())
    ->setIsCrawler($agent->getIsCrawler())
    ->setIsRssReader($agent->getIsRssReader())
    ->setIsBanned($agent->getIsBanned())
    ->setIsMobileDevice($agent->getIsMobileDevice());
  }

  protected function updateHistory($requestUri)
  {
      if ($requestUri != $this->getUrl() || !$this->getLastTime())
      {
        $this->set('history',
          $this->get('history').
          self::HISTORY_SEPARATOR.
          strtr($requestUri, array(
            self::HISTORY_SEPARATOR => "",
            dm::getRequest()->getAbsoluteUrlRoot() => ""
          ))
        );
      }
    return $this->truncateHistory();
  }

  protected function truncateHistory()
  {
    $history = $this->getHistory();
    if (strlen($history) > self::HISTORY_MAX_SIZE)
    {
      $history = substr($history, -self::HISTORY_MIN_SIZE);
      $history = substr($history, strpos($history, self::HISTORY_SEPARATOR));
      $this->setHistory($history);
    }
    return $this;
  }


  public function getHistoryLinks()
  {
    $links = array();
    $baseUrl = dm::getRequest()->getAbsoluteUrlRoot();
    foreach(explode(self::HISTORY_SEPARATOR, $this->getHistory()) as $relUrl)
    {
      $links[] = $baseUrl.$relUrl;
    }
    return $links;
  }

  public function isHtml()
  {
    return $this->content_type === 'text/html';
  }

  public function isRss()
  {
    return $this->content_type === 'application/rss+xml' || $this->content_type === 'text/xml';
  }

  public function isHuman()
  {
    return !$this->getIsCrawler() && !$this->getIsRssReader() && !$this->getIsBanned();
  }

  public function isWebkit()
  {
    $version = $this->browser_version;

    switch($this->browser_name)
    {
      case "Firefox": $is_webkit = version_compare($version, 3) >= 0; break;
      case "Chrome":  $is_webkit = version_compare($version, 1) >= 0; break;
      case "Safari":  $is_webkit = version_compare($version, 3) >= 0; break;
      case "Opera":   $is_webkit = version_compare($version, 9) >= 0; break;
      default:        $is_webkit = false;
    }
    return $is_webkit;
  }

  public function isError()
  {
    return in_array($this->status_code, array(
      "404", "500"
    ));
  }

  public function isNotModified()
  {
    return in_array($this->status_code, array(
      "304"
    ));
  }

  public function getBrowser()
  {
    return $this->browser_name." ".$this->browser_version;
  }

  public function __toString()
  {
    return $this->ip." ".$this->browser_name;
  }

  public function getPseudoOrNull()
  {
    if ($this->getDmProfileId())
    {
      if ($profile = $this->getDmProfile())
      {
        return $profile->getUser()->getUsername();
      }
    }

    return null;
  }

  public function getPseudo()
  {
    if ($pseudo = $this->getPseudoOrNull())
    {
      return $pseudo;
    }
    return "anonyme";
  }

  public function getAgent()
  {
    if ($this->hasCache('agent'))
    {
      return $this->getCache('agent');
    }

    return $this->setCache('agent', dmAgent::retrieveByUserAgent($this->getUserAgent()));
  }

}